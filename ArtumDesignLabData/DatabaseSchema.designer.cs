#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ArtumDesignLab
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="u199963_avto")]
	public partial class SiteDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBlogCategory(BlogCategory instance);
    partial void UpdateBlogCategory(BlogCategory instance);
    partial void DeleteBlogCategory(BlogCategory instance);
    partial void InsertWork(Work instance);
    partial void UpdateWork(Work instance);
    partial void DeleteWork(Work instance);
    partial void InsertBlogPhoto(BlogPhoto instance);
    partial void UpdateBlogPhoto(BlogPhoto instance);
    partial void DeleteBlogPhoto(BlogPhoto instance);
    partial void InsertBlogQuickLink(BlogQuickLink instance);
    partial void UpdateBlogQuickLink(BlogQuickLink instance);
    partial void DeleteBlogQuickLink(BlogQuickLink instance);
    partial void InsertBlog(Blog instance);
    partial void UpdateBlog(Blog instance);
    partial void DeleteBlog(Blog instance);
    partial void InsertBlogTeaser(BlogTeaser instance);
    partial void UpdateBlogTeaser(BlogTeaser instance);
    partial void DeleteBlogTeaser(BlogTeaser instance);
    partial void InsertCustomData(CustomData instance);
    partial void UpdateCustomData(CustomData instance);
    partial void DeleteCustomData(CustomData instance);
    partial void InsertNew(New instance);
    partial void UpdateNew(New instance);
    partial void DeleteNew(New instance);
    partial void InsertPorfolioTeaser(PorfolioTeaser instance);
    partial void UpdatePorfolioTeaser(PorfolioTeaser instance);
    partial void DeletePorfolioTeaser(PorfolioTeaser instance);
    partial void InsertProjectCategory(ProjectCategory instance);
    partial void UpdateProjectCategory(ProjectCategory instance);
    partial void DeleteProjectCategory(ProjectCategory instance);
    partial void InsertProjectPhotoCategory(ProjectPhotoCategory instance);
    partial void UpdateProjectPhotoCategory(ProjectPhotoCategory instance);
    partial void DeleteProjectPhotoCategory(ProjectPhotoCategory instance);
    partial void InsertProjectPhoto(ProjectPhoto instance);
    partial void UpdateProjectPhoto(ProjectPhoto instance);
    partial void DeleteProjectPhoto(ProjectPhoto instance);
    partial void InsertProjectQuickLink(ProjectQuickLink instance);
    partial void UpdateProjectQuickLink(ProjectQuickLink instance);
    partial void DeleteProjectQuickLink(ProjectQuickLink instance);
    partial void InsertResponse(Response instance);
    partial void UpdateResponse(Response instance);
    partial void DeleteResponse(Response instance);
    partial void InsertSpecialOffer(SpecialOffer instance);
    partial void UpdateSpecialOffer(SpecialOffer instance);
    partial void DeleteSpecialOffer(SpecialOffer instance);
    partial void InsertTeaser(Teaser instance);
    partial void UpdateTeaser(Teaser instance);
    partial void DeleteTeaser(Teaser instance);
    partial void InsertWorkCategory(WorkCategory instance);
    partial void UpdateWorkCategory(WorkCategory instance);
    partial void DeleteWorkCategory(WorkCategory instance);
    partial void InsertWorkPhoto(WorkPhoto instance);
    partial void UpdateWorkPhoto(WorkPhoto instance);
    partial void DeleteWorkPhoto(WorkPhoto instance);
    partial void InsertWorkQuickLink(WorkQuickLink instance);
    partial void UpdateWorkQuickLink(WorkQuickLink instance);
    partial void DeleteWorkQuickLink(WorkQuickLink instance);
    partial void InsertCourse(Course instance);
    partial void UpdateCourse(Course instance);
    partial void DeleteCourse(Course instance);
    partial void InsertPersonnelCategory(PersonnelCategory instance);
    partial void UpdatePersonnelCategory(PersonnelCategory instance);
    partial void DeletePersonnelCategory(PersonnelCategory instance);
    partial void InsertProject(Project instance);
    partial void UpdateProject(Project instance);
    partial void DeleteProject(Project instance);
    partial void InsertPersonnel(Personnel instance);
    partial void UpdatePersonnel(Personnel instance);
    partial void DeletePersonnel(Personnel instance);
    partial void InsertQuestion(Question instance);
    partial void UpdateQuestion(Question instance);
    partial void DeleteQuestion(Question instance);
    #endregion
		
		public SiteDataContext() : 
				base(global::ArtumDesignLab.Properties.Settings.Default.u199963_avtoConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SiteDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SiteDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SiteDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SiteDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<BlogCategory> BlogCategories
		{
			get
			{
				return this.GetTable<BlogCategory>();
			}
		}
		
		public System.Data.Linq.Table<Work> Works
		{
			get
			{
				return this.GetTable<Work>();
			}
		}
		
		public System.Data.Linq.Table<BlogPhoto> BlogPhotos
		{
			get
			{
				return this.GetTable<BlogPhoto>();
			}
		}
		
		public System.Data.Linq.Table<BlogQuickLink> BlogQuickLinks
		{
			get
			{
				return this.GetTable<BlogQuickLink>();
			}
		}
		
		public System.Data.Linq.Table<Blog> Blogs
		{
			get
			{
				return this.GetTable<Blog>();
			}
		}
		
		public System.Data.Linq.Table<BlogTeaser> BlogTeasers
		{
			get
			{
				return this.GetTable<BlogTeaser>();
			}
		}
		
		public System.Data.Linq.Table<CustomData> CustomDatas
		{
			get
			{
				return this.GetTable<CustomData>();
			}
		}
		
		public System.Data.Linq.Table<New> News
		{
			get
			{
				return this.GetTable<New>();
			}
		}
		
		public System.Data.Linq.Table<PorfolioTeaser> PorfolioTeasers
		{
			get
			{
				return this.GetTable<PorfolioTeaser>();
			}
		}
		
		public System.Data.Linq.Table<ProjectCategory> ProjectCategories
		{
			get
			{
				return this.GetTable<ProjectCategory>();
			}
		}
		
		public System.Data.Linq.Table<ProjectPhotoCategory> ProjectPhotoCategories
		{
			get
			{
				return this.GetTable<ProjectPhotoCategory>();
			}
		}
		
		public System.Data.Linq.Table<ProjectPhoto> ProjectPhotos
		{
			get
			{
				return this.GetTable<ProjectPhoto>();
			}
		}
		
		public System.Data.Linq.Table<ProjectQuickLink> ProjectQuickLinks
		{
			get
			{
				return this.GetTable<ProjectQuickLink>();
			}
		}
		
		public System.Data.Linq.Table<Response> Responses
		{
			get
			{
				return this.GetTable<Response>();
			}
		}
		
		public System.Data.Linq.Table<SpecialOffer> SpecialOffers
		{
			get
			{
				return this.GetTable<SpecialOffer>();
			}
		}
		
		public System.Data.Linq.Table<Teaser> Teasers
		{
			get
			{
				return this.GetTable<Teaser>();
			}
		}
		
		public System.Data.Linq.Table<WorkCategory> WorkCategories
		{
			get
			{
				return this.GetTable<WorkCategory>();
			}
		}
		
		public System.Data.Linq.Table<WorkPhoto> WorkPhotos
		{
			get
			{
				return this.GetTable<WorkPhoto>();
			}
		}
		
		public System.Data.Linq.Table<WorkQuickLink> WorkQuickLinks
		{
			get
			{
				return this.GetTable<WorkQuickLink>();
			}
		}
		
		public System.Data.Linq.Table<Course> Courses
		{
			get
			{
				return this.GetTable<Course>();
			}
		}
		
		public System.Data.Linq.Table<PersonnelCategory> PersonnelCategories
		{
			get
			{
				return this.GetTable<PersonnelCategory>();
			}
		}
		
		public System.Data.Linq.Table<Project> Projects
		{
			get
			{
				return this.GetTable<Project>();
			}
		}
		
		public System.Data.Linq.Table<Personnel> Personnels
		{
			get
			{
				return this.GetTable<Personnel>();
			}
		}
		
		public System.Data.Linq.Table<Question> Questions
		{
			get
			{
				return this.GetTable<Question>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetNewId", IsComposable=true)]
		public System.Nullable<System.Guid> GetNewId()
		{
			return ((System.Nullable<System.Guid>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod()))).ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BlogCategories")]
	public partial class BlogCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BlogCategoryID;
		
		private string _Name;
		
		private EntitySet<Blog> _Blogs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBlogCategoryIDChanging(int value);
    partial void OnBlogCategoryIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public BlogCategory()
		{
			this._Blogs = new EntitySet<Blog>(new Action<Blog>(this.attach_Blogs), new Action<Blog>(this.detach_Blogs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlogCategoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BlogCategoryID
		{
			get
			{
				return this._BlogCategoryID;
			}
			set
			{
				if ((this._BlogCategoryID != value))
				{
					this.OnBlogCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._BlogCategoryID = value;
					this.SendPropertyChanged("BlogCategoryID");
					this.OnBlogCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BlogCategory_Blog", Storage="_Blogs", ThisKey="BlogCategoryID", OtherKey="BlogCategoryID")]
		public EntitySet<Blog> Blogs
		{
			get
			{
				return this._Blogs;
			}
			set
			{
				this._Blogs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Blogs(Blog entity)
		{
			this.SendPropertyChanging();
			entity.BlogCategory = this;
		}
		
		private void detach_Blogs(Blog entity)
		{
			this.SendPropertyChanging();
			entity.BlogCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Works")]
	public partial class Work : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _WorkID;
		
		private int _WorkCategoryID;
		
		private System.DateTime _CreateDate;
		
		private string _MetaTitle;
		
		private string _MetaKeywords;
		
		private string _MetaDescription;
		
		private string _Header;
		
		private string _Text;
		
		private string _Image;
		
		private EntitySet<WorkPhoto> _WorkPhotos;
		
		private EntitySet<WorkQuickLink> _WorkQuickLinks;
		
		private EntityRef<WorkCategory> _WorkCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWorkIDChanging(int value);
    partial void OnWorkIDChanged();
    partial void OnWorkCategoryIDChanging(int value);
    partial void OnWorkCategoryIDChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnMetaTitleChanging(string value);
    partial void OnMetaTitleChanged();
    partial void OnMetaKeywordsChanging(string value);
    partial void OnMetaKeywordsChanged();
    partial void OnMetaDescriptionChanging(string value);
    partial void OnMetaDescriptionChanged();
    partial void OnHeaderChanging(string value);
    partial void OnHeaderChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    #endregion
		
		public Work()
		{
			this._WorkPhotos = new EntitySet<WorkPhoto>(new Action<WorkPhoto>(this.attach_WorkPhotos), new Action<WorkPhoto>(this.detach_WorkPhotos));
			this._WorkQuickLinks = new EntitySet<WorkQuickLink>(new Action<WorkQuickLink>(this.attach_WorkQuickLinks), new Action<WorkQuickLink>(this.detach_WorkQuickLinks));
			this._WorkCategory = default(EntityRef<WorkCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int WorkID
		{
			get
			{
				return this._WorkID;
			}
			set
			{
				if ((this._WorkID != value))
				{
					this.OnWorkIDChanging(value);
					this.SendPropertyChanging();
					this._WorkID = value;
					this.SendPropertyChanged("WorkID");
					this.OnWorkIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkCategoryID", DbType="Int NOT NULL")]
		public int WorkCategoryID
		{
			get
			{
				return this._WorkCategoryID;
			}
			set
			{
				if ((this._WorkCategoryID != value))
				{
					if (this._WorkCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWorkCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._WorkCategoryID = value;
					this.SendPropertyChanged("WorkCategoryID");
					this.OnWorkCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MetaTitle", DbType="NVarChar(500)")]
		public string MetaTitle
		{
			get
			{
				return this._MetaTitle;
			}
			set
			{
				if ((this._MetaTitle != value))
				{
					this.OnMetaTitleChanging(value);
					this.SendPropertyChanging();
					this._MetaTitle = value;
					this.SendPropertyChanged("MetaTitle");
					this.OnMetaTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MetaKeywords", DbType="NVarChar(500)")]
		public string MetaKeywords
		{
			get
			{
				return this._MetaKeywords;
			}
			set
			{
				if ((this._MetaKeywords != value))
				{
					this.OnMetaKeywordsChanging(value);
					this.SendPropertyChanging();
					this._MetaKeywords = value;
					this.SendPropertyChanged("MetaKeywords");
					this.OnMetaKeywordsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MetaDescription", DbType="NVarChar(500)")]
		public string MetaDescription
		{
			get
			{
				return this._MetaDescription;
			}
			set
			{
				if ((this._MetaDescription != value))
				{
					this.OnMetaDescriptionChanging(value);
					this.SendPropertyChanging();
					this._MetaDescription = value;
					this.SendPropertyChanged("MetaDescription");
					this.OnMetaDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Header", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Header
		{
			get
			{
				return this._Header;
			}
			set
			{
				if ((this._Header != value))
				{
					this.OnHeaderChanging(value);
					this.SendPropertyChanging();
					this._Header = value;
					this.SendPropertyChanged("Header");
					this.OnHeaderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(MAX)")]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="NVarChar(255)")]
		public string Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Work_WorkPhoto", Storage="_WorkPhotos", ThisKey="WorkID", OtherKey="WorkID")]
		public EntitySet<WorkPhoto> WorkPhotos
		{
			get
			{
				return this._WorkPhotos;
			}
			set
			{
				this._WorkPhotos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Work_WorkQuickLink", Storage="_WorkQuickLinks", ThisKey="WorkID", OtherKey="WorkID")]
		public EntitySet<WorkQuickLink> WorkQuickLinks
		{
			get
			{
				return this._WorkQuickLinks;
			}
			set
			{
				this._WorkQuickLinks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkCategory_Work", Storage="_WorkCategory", ThisKey="WorkCategoryID", OtherKey="WorkCategoryID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public WorkCategory WorkCategory
		{
			get
			{
				return this._WorkCategory.Entity;
			}
			set
			{
				WorkCategory previousValue = this._WorkCategory.Entity;
				if (((previousValue != value) 
							|| (this._WorkCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WorkCategory.Entity = null;
						previousValue.Works.Remove(this);
					}
					this._WorkCategory.Entity = value;
					if ((value != null))
					{
						value.Works.Add(this);
						this._WorkCategoryID = value.WorkCategoryID;
					}
					else
					{
						this._WorkCategoryID = default(int);
					}
					this.SendPropertyChanged("WorkCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WorkPhotos(WorkPhoto entity)
		{
			this.SendPropertyChanging();
			entity.Work = this;
		}
		
		private void detach_WorkPhotos(WorkPhoto entity)
		{
			this.SendPropertyChanging();
			entity.Work = null;
		}
		
		private void attach_WorkQuickLinks(WorkQuickLink entity)
		{
			this.SendPropertyChanging();
			entity.Work = this;
		}
		
		private void detach_WorkQuickLinks(WorkQuickLink entity)
		{
			this.SendPropertyChanging();
			entity.Work = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BlogPhotos")]
	public partial class BlogPhoto : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BlogPhotoID;
		
		private int _BlogID;
		
		private string _Name;
		
		private EntityRef<Blog> _Blog;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBlogPhotoIDChanging(int value);
    partial void OnBlogPhotoIDChanged();
    partial void OnBlogIDChanging(int value);
    partial void OnBlogIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public BlogPhoto()
		{
			this._Blog = default(EntityRef<Blog>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlogPhotoID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BlogPhotoID
		{
			get
			{
				return this._BlogPhotoID;
			}
			set
			{
				if ((this._BlogPhotoID != value))
				{
					this.OnBlogPhotoIDChanging(value);
					this.SendPropertyChanging();
					this._BlogPhotoID = value;
					this.SendPropertyChanged("BlogPhotoID");
					this.OnBlogPhotoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlogID", DbType="Int NOT NULL")]
		public int BlogID
		{
			get
			{
				return this._BlogID;
			}
			set
			{
				if ((this._BlogID != value))
				{
					if (this._Blog.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBlogIDChanging(value);
					this.SendPropertyChanging();
					this._BlogID = value;
					this.SendPropertyChanged("BlogID");
					this.OnBlogIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Blog_BlogPhoto", Storage="_Blog", ThisKey="BlogID", OtherKey="BlogID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Blog Blog
		{
			get
			{
				return this._Blog.Entity;
			}
			set
			{
				Blog previousValue = this._Blog.Entity;
				if (((previousValue != value) 
							|| (this._Blog.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Blog.Entity = null;
						previousValue.BlogPhotos.Remove(this);
					}
					this._Blog.Entity = value;
					if ((value != null))
					{
						value.BlogPhotos.Add(this);
						this._BlogID = value.BlogID;
					}
					else
					{
						this._BlogID = default(int);
					}
					this.SendPropertyChanged("Blog");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BlogQuickLinks")]
	public partial class BlogQuickLink : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BlogQuickLinkID;
		
		private int _BlogID;
		
		private System.Nullable<int> _SubmenuLinkID;
		
		private string _Title;
		
		private string _URL;
		
		private EntitySet<BlogQuickLink> _BlogQuickLinks;
		
		private EntityRef<BlogQuickLink> _BlogQuickLink1;
		
		private EntityRef<Blog> _Blog;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBlogQuickLinkIDChanging(int value);
    partial void OnBlogQuickLinkIDChanged();
    partial void OnBlogIDChanging(int value);
    partial void OnBlogIDChanged();
    partial void OnSubmenuLinkIDChanging(System.Nullable<int> value);
    partial void OnSubmenuLinkIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnURLChanging(string value);
    partial void OnURLChanged();
    #endregion
		
		public BlogQuickLink()
		{
			this._BlogQuickLinks = new EntitySet<BlogQuickLink>(new Action<BlogQuickLink>(this.attach_BlogQuickLinks), new Action<BlogQuickLink>(this.detach_BlogQuickLinks));
			this._BlogQuickLink1 = default(EntityRef<BlogQuickLink>);
			this._Blog = default(EntityRef<Blog>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlogQuickLinkID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BlogQuickLinkID
		{
			get
			{
				return this._BlogQuickLinkID;
			}
			set
			{
				if ((this._BlogQuickLinkID != value))
				{
					this.OnBlogQuickLinkIDChanging(value);
					this.SendPropertyChanging();
					this._BlogQuickLinkID = value;
					this.SendPropertyChanged("BlogQuickLinkID");
					this.OnBlogQuickLinkIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlogID", DbType="Int NOT NULL")]
		public int BlogID
		{
			get
			{
				return this._BlogID;
			}
			set
			{
				if ((this._BlogID != value))
				{
					if (this._Blog.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBlogIDChanging(value);
					this.SendPropertyChanging();
					this._BlogID = value;
					this.SendPropertyChanged("BlogID");
					this.OnBlogIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmenuLinkID", DbType="Int")]
		public System.Nullable<int> SubmenuLinkID
		{
			get
			{
				return this._SubmenuLinkID;
			}
			set
			{
				if ((this._SubmenuLinkID != value))
				{
					if (this._BlogQuickLink1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubmenuLinkIDChanging(value);
					this.SendPropertyChanging();
					this._SubmenuLinkID = value;
					this.SendPropertyChanged("SubmenuLinkID");
					this.OnSubmenuLinkIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_URL", DbType="NVarChar(500)")]
		public string URL
		{
			get
			{
				return this._URL;
			}
			set
			{
				if ((this._URL != value))
				{
					this.OnURLChanging(value);
					this.SendPropertyChanging();
					this._URL = value;
					this.SendPropertyChanged("URL");
					this.OnURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BlogQuickLink_BlogQuickLink", Storage="_BlogQuickLinks", ThisKey="BlogQuickLinkID", OtherKey="SubmenuLinkID")]
		public EntitySet<BlogQuickLink> BlogQuickLinks
		{
			get
			{
				return this._BlogQuickLinks;
			}
			set
			{
				this._BlogQuickLinks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BlogQuickLink_BlogQuickLink", Storage="_BlogQuickLink1", ThisKey="SubmenuLinkID", OtherKey="BlogQuickLinkID", IsForeignKey=true)]
		public BlogQuickLink BlogQuickLink1
		{
			get
			{
				return this._BlogQuickLink1.Entity;
			}
			set
			{
				BlogQuickLink previousValue = this._BlogQuickLink1.Entity;
				if (((previousValue != value) 
							|| (this._BlogQuickLink1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BlogQuickLink1.Entity = null;
						previousValue.BlogQuickLinks.Remove(this);
					}
					this._BlogQuickLink1.Entity = value;
					if ((value != null))
					{
						value.BlogQuickLinks.Add(this);
						this._SubmenuLinkID = value.BlogQuickLinkID;
					}
					else
					{
						this._SubmenuLinkID = default(Nullable<int>);
					}
					this.SendPropertyChanged("BlogQuickLink1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Blog_BlogQuickLink", Storage="_Blog", ThisKey="BlogID", OtherKey="BlogID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Blog Blog
		{
			get
			{
				return this._Blog.Entity;
			}
			set
			{
				Blog previousValue = this._Blog.Entity;
				if (((previousValue != value) 
							|| (this._Blog.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Blog.Entity = null;
						previousValue.BlogQuickLinks.Remove(this);
					}
					this._Blog.Entity = value;
					if ((value != null))
					{
						value.BlogQuickLinks.Add(this);
						this._BlogID = value.BlogID;
					}
					else
					{
						this._BlogID = default(int);
					}
					this.SendPropertyChanged("Blog");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BlogQuickLinks(BlogQuickLink entity)
		{
			this.SendPropertyChanging();
			entity.BlogQuickLink1 = this;
		}
		
		private void detach_BlogQuickLinks(BlogQuickLink entity)
		{
			this.SendPropertyChanging();
			entity.BlogQuickLink1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Blogs")]
	public partial class Blog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BlogID;
		
		private int _BlogCategoryID;
		
		private System.DateTime _CreateDate;
		
		private string _Header;
		
		private string _MetaTitle;
		
		private string _MetaDescription;
		
		private string _MetaKeywords;
		
		private string _PreviewText;
		
		private string _Text;
		
		private string _Image;
		
		private string _Url;
		
		private string _Placeholder;
		
		private EntitySet<BlogPhoto> _BlogPhotos;
		
		private EntitySet<BlogQuickLink> _BlogQuickLinks;
		
		private EntityRef<BlogCategory> _BlogCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBlogIDChanging(int value);
    partial void OnBlogIDChanged();
    partial void OnBlogCategoryIDChanging(int value);
    partial void OnBlogCategoryIDChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnHeaderChanging(string value);
    partial void OnHeaderChanged();
    partial void OnMetaTitleChanging(string value);
    partial void OnMetaTitleChanged();
    partial void OnMetaDescriptionChanging(string value);
    partial void OnMetaDescriptionChanged();
    partial void OnMetaKeywordsChanging(string value);
    partial void OnMetaKeywordsChanged();
    partial void OnPreviewTextChanging(string value);
    partial void OnPreviewTextChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnPlaceholderChanging(string value);
    partial void OnPlaceholderChanged();
    #endregion
		
		public Blog()
		{
			this._BlogPhotos = new EntitySet<BlogPhoto>(new Action<BlogPhoto>(this.attach_BlogPhotos), new Action<BlogPhoto>(this.detach_BlogPhotos));
			this._BlogQuickLinks = new EntitySet<BlogQuickLink>(new Action<BlogQuickLink>(this.attach_BlogQuickLinks), new Action<BlogQuickLink>(this.detach_BlogQuickLinks));
			this._BlogCategory = default(EntityRef<BlogCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlogID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BlogID
		{
			get
			{
				return this._BlogID;
			}
			set
			{
				if ((this._BlogID != value))
				{
					this.OnBlogIDChanging(value);
					this.SendPropertyChanging();
					this._BlogID = value;
					this.SendPropertyChanged("BlogID");
					this.OnBlogIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlogCategoryID", DbType="Int NOT NULL")]
		public int BlogCategoryID
		{
			get
			{
				return this._BlogCategoryID;
			}
			set
			{
				if ((this._BlogCategoryID != value))
				{
					if (this._BlogCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBlogCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._BlogCategoryID = value;
					this.SendPropertyChanged("BlogCategoryID");
					this.OnBlogCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Header", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Header
		{
			get
			{
				return this._Header;
			}
			set
			{
				if ((this._Header != value))
				{
					this.OnHeaderChanging(value);
					this.SendPropertyChanging();
					this._Header = value;
					this.SendPropertyChanged("Header");
					this.OnHeaderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MetaTitle", DbType="NVarChar(1000)")]
		public string MetaTitle
		{
			get
			{
				return this._MetaTitle;
			}
			set
			{
				if ((this._MetaTitle != value))
				{
					this.OnMetaTitleChanging(value);
					this.SendPropertyChanging();
					this._MetaTitle = value;
					this.SendPropertyChanged("MetaTitle");
					this.OnMetaTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MetaDescription", DbType="NVarChar(1000)")]
		public string MetaDescription
		{
			get
			{
				return this._MetaDescription;
			}
			set
			{
				if ((this._MetaDescription != value))
				{
					this.OnMetaDescriptionChanging(value);
					this.SendPropertyChanging();
					this._MetaDescription = value;
					this.SendPropertyChanged("MetaDescription");
					this.OnMetaDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MetaKeywords", DbType="NVarChar(1000)")]
		public string MetaKeywords
		{
			get
			{
				return this._MetaKeywords;
			}
			set
			{
				if ((this._MetaKeywords != value))
				{
					this.OnMetaKeywordsChanging(value);
					this.SendPropertyChanging();
					this._MetaKeywords = value;
					this.SendPropertyChanged("MetaKeywords");
					this.OnMetaKeywordsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreviewText", DbType="NVarChar(1000) NOT NULL", CanBeNull=false)]
		public string PreviewText
		{
			get
			{
				return this._PreviewText;
			}
			set
			{
				if ((this._PreviewText != value))
				{
					this.OnPreviewTextChanging(value);
					this.SendPropertyChanging();
					this._PreviewText = value;
					this.SendPropertyChanged("PreviewText");
					this.OnPreviewTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="NVarChar(255)")]
		public string Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(1024)")]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Placeholder")]
		public string Placeholder
		{
			get
			{
				return this._Placeholder;
			}
			set
			{
				if ((this._Placeholder != value))
				{
					this.OnPlaceholderChanging(value);
					this.SendPropertyChanging();
					this._Placeholder = value;
					this.SendPropertyChanged("Placeholder");
					this.OnPlaceholderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Blog_BlogPhoto", Storage="_BlogPhotos", ThisKey="BlogID", OtherKey="BlogID")]
		public EntitySet<BlogPhoto> BlogPhotos
		{
			get
			{
				return this._BlogPhotos;
			}
			set
			{
				this._BlogPhotos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Blog_BlogQuickLink", Storage="_BlogQuickLinks", ThisKey="BlogID", OtherKey="BlogID")]
		public EntitySet<BlogQuickLink> BlogQuickLinks
		{
			get
			{
				return this._BlogQuickLinks;
			}
			set
			{
				this._BlogQuickLinks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BlogCategory_Blog", Storage="_BlogCategory", ThisKey="BlogCategoryID", OtherKey="BlogCategoryID", IsForeignKey=true)]
		public BlogCategory BlogCategory
		{
			get
			{
				return this._BlogCategory.Entity;
			}
			set
			{
				BlogCategory previousValue = this._BlogCategory.Entity;
				if (((previousValue != value) 
							|| (this._BlogCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BlogCategory.Entity = null;
						previousValue.Blogs.Remove(this);
					}
					this._BlogCategory.Entity = value;
					if ((value != null))
					{
						value.Blogs.Add(this);
						this._BlogCategoryID = value.BlogCategoryID;
					}
					else
					{
						this._BlogCategoryID = default(int);
					}
					this.SendPropertyChanged("BlogCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BlogPhotos(BlogPhoto entity)
		{
			this.SendPropertyChanging();
			entity.Blog = this;
		}
		
		private void detach_BlogPhotos(BlogPhoto entity)
		{
			this.SendPropertyChanging();
			entity.Blog = null;
		}
		
		private void attach_BlogQuickLinks(BlogQuickLink entity)
		{
			this.SendPropertyChanging();
			entity.Blog = this;
		}
		
		private void detach_BlogQuickLinks(BlogQuickLink entity)
		{
			this.SendPropertyChanging();
			entity.Blog = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BlogTeasers")]
	public partial class BlogTeaser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BlogTeaserID;
		
		private int _BlogID;
		
		private int _TeaserID;
		
		private EntityRef<Teaser> _Teaser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBlogTeaserIDChanging(int value);
    partial void OnBlogTeaserIDChanged();
    partial void OnBlogIDChanging(int value);
    partial void OnBlogIDChanged();
    partial void OnTeaserIDChanging(int value);
    partial void OnTeaserIDChanged();
    #endregion
		
		public BlogTeaser()
		{
			this._Teaser = default(EntityRef<Teaser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlogTeaserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BlogTeaserID
		{
			get
			{
				return this._BlogTeaserID;
			}
			set
			{
				if ((this._BlogTeaserID != value))
				{
					this.OnBlogTeaserIDChanging(value);
					this.SendPropertyChanging();
					this._BlogTeaserID = value;
					this.SendPropertyChanged("BlogTeaserID");
					this.OnBlogTeaserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlogID", DbType="Int NOT NULL")]
		public int BlogID
		{
			get
			{
				return this._BlogID;
			}
			set
			{
				if ((this._BlogID != value))
				{
					this.OnBlogIDChanging(value);
					this.SendPropertyChanging();
					this._BlogID = value;
					this.SendPropertyChanged("BlogID");
					this.OnBlogIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeaserID", DbType="Int NOT NULL")]
		public int TeaserID
		{
			get
			{
				return this._TeaserID;
			}
			set
			{
				if ((this._TeaserID != value))
				{
					if (this._Teaser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeaserIDChanging(value);
					this.SendPropertyChanging();
					this._TeaserID = value;
					this.SendPropertyChanged("TeaserID");
					this.OnTeaserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teaser_BlogTeaser", Storage="_Teaser", ThisKey="TeaserID", OtherKey="TeaserID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Teaser Teaser
		{
			get
			{
				return this._Teaser.Entity;
			}
			set
			{
				Teaser previousValue = this._Teaser.Entity;
				if (((previousValue != value) 
							|| (this._Teaser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Teaser.Entity = null;
						previousValue.BlogTeasers.Remove(this);
					}
					this._Teaser.Entity = value;
					if ((value != null))
					{
						value.BlogTeasers.Add(this);
						this._TeaserID = value.TeaserID;
					}
					else
					{
						this._TeaserID = default(int);
					}
					this.SendPropertyChanged("Teaser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CustomData")]
	public partial class CustomData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CustomDataID;
		
		private string _Name;
		
		private string _Value;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomDataIDChanging(int value);
    partial void OnCustomDataIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public CustomData()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomDataID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CustomDataID
		{
			get
			{
				return this._CustomDataID;
			}
			set
			{
				if ((this._CustomDataID != value))
				{
					this.OnCustomDataIDChanging(value);
					this.SendPropertyChanging();
					this._CustomDataID = value;
					this.SendPropertyChanged("CustomDataID");
					this.OnCustomDataIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.News")]
	public partial class New : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NewID;
		
		private System.DateTime _Date;
		
		private string _Header;
		
		private string _Text;
		
		private string _Image;
		
		private string _Url;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNewIDChanging(int value);
    partial void OnNewIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnHeaderChanging(string value);
    partial void OnHeaderChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    #endregion
		
		public New()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int NewID
		{
			get
			{
				return this._NewID;
			}
			set
			{
				if ((this._NewID != value))
				{
					this.OnNewIDChanging(value);
					this.SendPropertyChanging();
					this._NewID = value;
					this.SendPropertyChanged("NewID");
					this.OnNewIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Header", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Header
		{
			get
			{
				return this._Header;
			}
			set
			{
				if ((this._Header != value))
				{
					this.OnHeaderChanging(value);
					this.SendPropertyChanging();
					this._Header = value;
					this.SendPropertyChanged("Header");
					this.OnHeaderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="NVarChar(50)")]
		public string Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(1024)")]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PorfolioTeasers")]
	public partial class PorfolioTeaser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PortfolioTeaserID;
		
		private int _CategoryID;
		
		private int _TeaserID;
		
		private EntityRef<Teaser> _Teaser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPortfolioTeaserIDChanging(int value);
    partial void OnPortfolioTeaserIDChanged();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    partial void OnTeaserIDChanging(int value);
    partial void OnTeaserIDChanged();
    #endregion
		
		public PorfolioTeaser()
		{
			this._Teaser = default(EntityRef<Teaser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PortfolioTeaserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PortfolioTeaserID
		{
			get
			{
				return this._PortfolioTeaserID;
			}
			set
			{
				if ((this._PortfolioTeaserID != value))
				{
					this.OnPortfolioTeaserIDChanging(value);
					this.SendPropertyChanging();
					this._PortfolioTeaserID = value;
					this.SendPropertyChanged("PortfolioTeaserID");
					this.OnPortfolioTeaserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", DbType="Int NOT NULL")]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeaserID", DbType="Int NOT NULL")]
		public int TeaserID
		{
			get
			{
				return this._TeaserID;
			}
			set
			{
				if ((this._TeaserID != value))
				{
					if (this._Teaser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeaserIDChanging(value);
					this.SendPropertyChanging();
					this._TeaserID = value;
					this.SendPropertyChanged("TeaserID");
					this.OnTeaserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teaser_PorfolioTeaser", Storage="_Teaser", ThisKey="TeaserID", OtherKey="TeaserID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Teaser Teaser
		{
			get
			{
				return this._Teaser.Entity;
			}
			set
			{
				Teaser previousValue = this._Teaser.Entity;
				if (((previousValue != value) 
							|| (this._Teaser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Teaser.Entity = null;
						previousValue.PorfolioTeasers.Remove(this);
					}
					this._Teaser.Entity = value;
					if ((value != null))
					{
						value.PorfolioTeasers.Add(this);
						this._TeaserID = value.TeaserID;
					}
					else
					{
						this._TeaserID = default(int);
					}
					this.SendPropertyChanged("Teaser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProjectCategories")]
	public partial class ProjectCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProjectCategoryID;
		
		private string _Name;
		
		private string _Title;
		
		private string _Text;
		
		private string _Url;
		
		private EntitySet<Project> _Projects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProjectCategoryIDChanging(int value);
    partial void OnProjectCategoryIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    #endregion
		
		public ProjectCategory()
		{
			this._Projects = new EntitySet<Project>(new Action<Project>(this.attach_Projects), new Action<Project>(this.detach_Projects));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectCategoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProjectCategoryID
		{
			get
			{
				return this._ProjectCategoryID;
			}
			set
			{
				if ((this._ProjectCategoryID != value))
				{
					this.OnProjectCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectCategoryID = value;
					this.SendPropertyChanged("ProjectCategoryID");
					this.OnProjectCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(500)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(1024)")]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectCategory_Project", Storage="_Projects", ThisKey="ProjectCategoryID", OtherKey="ProjectCategoryID")]
		public EntitySet<Project> Projects
		{
			get
			{
				return this._Projects;
			}
			set
			{
				this._Projects.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.ProjectCategory = this;
		}
		
		private void detach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.ProjectCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProjectPhotoCategories")]
	public partial class ProjectPhotoCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProjectPhotoCategoryID;
		
		private string _Name;
		
		private EntitySet<ProjectPhoto> _ProjectPhotos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProjectPhotoCategoryIDChanging(int value);
    partial void OnProjectPhotoCategoryIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public ProjectPhotoCategory()
		{
			this._ProjectPhotos = new EntitySet<ProjectPhoto>(new Action<ProjectPhoto>(this.attach_ProjectPhotos), new Action<ProjectPhoto>(this.detach_ProjectPhotos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectPhotoCategoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProjectPhotoCategoryID
		{
			get
			{
				return this._ProjectPhotoCategoryID;
			}
			set
			{
				if ((this._ProjectPhotoCategoryID != value))
				{
					this.OnProjectPhotoCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectPhotoCategoryID = value;
					this.SendPropertyChanged("ProjectPhotoCategoryID");
					this.OnProjectPhotoCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(500)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectPhotoCategory_ProjectPhoto", Storage="_ProjectPhotos", ThisKey="ProjectPhotoCategoryID", OtherKey="ProjectPhotoCategoryID")]
		public EntitySet<ProjectPhoto> ProjectPhotos
		{
			get
			{
				return this._ProjectPhotos;
			}
			set
			{
				this._ProjectPhotos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProjectPhotos(ProjectPhoto entity)
		{
			this.SendPropertyChanging();
			entity.ProjectPhotoCategory = this;
		}
		
		private void detach_ProjectPhotos(ProjectPhoto entity)
		{
			this.SendPropertyChanging();
			entity.ProjectPhotoCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProjectPhotos")]
	public partial class ProjectPhoto : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProjectPhotoID;
		
		private System.Nullable<int> _ProjectID;
		
		private System.Nullable<int> _ProjectPhotoCategoryID;
		
		private string _ProjectPhotoPath;
		
		private string _ProjectPhotoThumb;
		
		private string _ProjectPhotoName;
		
		private EntityRef<ProjectPhotoCategory> _ProjectPhotoCategory;
		
		private EntityRef<Project> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProjectPhotoIDChanging(int value);
    partial void OnProjectPhotoIDChanged();
    partial void OnProjectIDChanging(System.Nullable<int> value);
    partial void OnProjectIDChanged();
    partial void OnProjectPhotoCategoryIDChanging(System.Nullable<int> value);
    partial void OnProjectPhotoCategoryIDChanged();
    partial void OnProjectPhotoPathChanging(string value);
    partial void OnProjectPhotoPathChanged();
    partial void OnProjectPhotoThumbChanging(string value);
    partial void OnProjectPhotoThumbChanged();
    partial void OnProjectPhotoNameChanging(string value);
    partial void OnProjectPhotoNameChanged();
    #endregion
		
		public ProjectPhoto()
		{
			this._ProjectPhotoCategory = default(EntityRef<ProjectPhotoCategory>);
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectPhotoID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProjectPhotoID
		{
			get
			{
				return this._ProjectPhotoID;
			}
			set
			{
				if ((this._ProjectPhotoID != value))
				{
					this.OnProjectPhotoIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectPhotoID = value;
					this.SendPropertyChanged("ProjectPhotoID");
					this.OnProjectPhotoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int")]
		public System.Nullable<int> ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectPhotoCategoryID", DbType="Int")]
		public System.Nullable<int> ProjectPhotoCategoryID
		{
			get
			{
				return this._ProjectPhotoCategoryID;
			}
			set
			{
				if ((this._ProjectPhotoCategoryID != value))
				{
					if (this._ProjectPhotoCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectPhotoCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectPhotoCategoryID = value;
					this.SendPropertyChanged("ProjectPhotoCategoryID");
					this.OnProjectPhotoCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectPhotoPath", DbType="NVarChar(500)")]
		public string ProjectPhotoPath
		{
			get
			{
				return this._ProjectPhotoPath;
			}
			set
			{
				if ((this._ProjectPhotoPath != value))
				{
					this.OnProjectPhotoPathChanging(value);
					this.SendPropertyChanging();
					this._ProjectPhotoPath = value;
					this.SendPropertyChanged("ProjectPhotoPath");
					this.OnProjectPhotoPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectPhotoThumb", DbType="NVarChar(500)")]
		public string ProjectPhotoThumb
		{
			get
			{
				return this._ProjectPhotoThumb;
			}
			set
			{
				if ((this._ProjectPhotoThumb != value))
				{
					this.OnProjectPhotoThumbChanging(value);
					this.SendPropertyChanging();
					this._ProjectPhotoThumb = value;
					this.SendPropertyChanged("ProjectPhotoThumb");
					this.OnProjectPhotoThumbChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectPhotoName", DbType="NVarChar(500)")]
		public string ProjectPhotoName
		{
			get
			{
				return this._ProjectPhotoName;
			}
			set
			{
				if ((this._ProjectPhotoName != value))
				{
					this.OnProjectPhotoNameChanging(value);
					this.SendPropertyChanging();
					this._ProjectPhotoName = value;
					this.SendPropertyChanged("ProjectPhotoName");
					this.OnProjectPhotoNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectPhotoCategory_ProjectPhoto", Storage="_ProjectPhotoCategory", ThisKey="ProjectPhotoCategoryID", OtherKey="ProjectPhotoCategoryID", IsForeignKey=true)]
		public ProjectPhotoCategory ProjectPhotoCategory
		{
			get
			{
				return this._ProjectPhotoCategory.Entity;
			}
			set
			{
				ProjectPhotoCategory previousValue = this._ProjectPhotoCategory.Entity;
				if (((previousValue != value) 
							|| (this._ProjectPhotoCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectPhotoCategory.Entity = null;
						previousValue.ProjectPhotos.Remove(this);
					}
					this._ProjectPhotoCategory.Entity = value;
					if ((value != null))
					{
						value.ProjectPhotos.Add(this);
						this._ProjectPhotoCategoryID = value.ProjectPhotoCategoryID;
					}
					else
					{
						this._ProjectPhotoCategoryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProjectPhotoCategory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectPhoto", Storage="_Project", ThisKey="ProjectID", OtherKey="ProjectID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.ProjectPhotos.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.ProjectPhotos.Add(this);
						this._ProjectID = value.ProjectID;
					}
					else
					{
						this._ProjectID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProjectQuickLinks")]
	public partial class ProjectQuickLink : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProjectQuickLinkID;
		
		private int _ProjectID;
		
		private System.Nullable<int> _SubmenuLinkID;
		
		private string _Title;
		
		private string _URL;
		
		private EntitySet<ProjectQuickLink> _ProjectQuickLinks;
		
		private EntityRef<ProjectQuickLink> _ProjectQuickLink1;
		
		private EntityRef<Project> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProjectQuickLinkIDChanging(int value);
    partial void OnProjectQuickLinkIDChanged();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    partial void OnSubmenuLinkIDChanging(System.Nullable<int> value);
    partial void OnSubmenuLinkIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnURLChanging(string value);
    partial void OnURLChanged();
    #endregion
		
		public ProjectQuickLink()
		{
			this._ProjectQuickLinks = new EntitySet<ProjectQuickLink>(new Action<ProjectQuickLink>(this.attach_ProjectQuickLinks), new Action<ProjectQuickLink>(this.detach_ProjectQuickLinks));
			this._ProjectQuickLink1 = default(EntityRef<ProjectQuickLink>);
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectQuickLinkID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProjectQuickLinkID
		{
			get
			{
				return this._ProjectQuickLinkID;
			}
			set
			{
				if ((this._ProjectQuickLinkID != value))
				{
					this.OnProjectQuickLinkIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectQuickLinkID = value;
					this.SendPropertyChanged("ProjectQuickLinkID");
					this.OnProjectQuickLinkIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int NOT NULL")]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmenuLinkID", DbType="Int")]
		public System.Nullable<int> SubmenuLinkID
		{
			get
			{
				return this._SubmenuLinkID;
			}
			set
			{
				if ((this._SubmenuLinkID != value))
				{
					if (this._ProjectQuickLink1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubmenuLinkIDChanging(value);
					this.SendPropertyChanging();
					this._SubmenuLinkID = value;
					this.SendPropertyChanged("SubmenuLinkID");
					this.OnSubmenuLinkIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_URL", DbType="NVarChar(500)")]
		public string URL
		{
			get
			{
				return this._URL;
			}
			set
			{
				if ((this._URL != value))
				{
					this.OnURLChanging(value);
					this.SendPropertyChanging();
					this._URL = value;
					this.SendPropertyChanged("URL");
					this.OnURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectQuickLink_ProjectQuickLink", Storage="_ProjectQuickLinks", ThisKey="ProjectQuickLinkID", OtherKey="SubmenuLinkID")]
		public EntitySet<ProjectQuickLink> ProjectQuickLinks
		{
			get
			{
				return this._ProjectQuickLinks;
			}
			set
			{
				this._ProjectQuickLinks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectQuickLink_ProjectQuickLink", Storage="_ProjectQuickLink1", ThisKey="SubmenuLinkID", OtherKey="ProjectQuickLinkID", IsForeignKey=true)]
		public ProjectQuickLink ProjectQuickLink1
		{
			get
			{
				return this._ProjectQuickLink1.Entity;
			}
			set
			{
				ProjectQuickLink previousValue = this._ProjectQuickLink1.Entity;
				if (((previousValue != value) 
							|| (this._ProjectQuickLink1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectQuickLink1.Entity = null;
						previousValue.ProjectQuickLinks.Remove(this);
					}
					this._ProjectQuickLink1.Entity = value;
					if ((value != null))
					{
						value.ProjectQuickLinks.Add(this);
						this._SubmenuLinkID = value.ProjectQuickLinkID;
					}
					else
					{
						this._SubmenuLinkID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProjectQuickLink1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectQuickLink", Storage="_Project", ThisKey="ProjectID", OtherKey="ProjectID", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.ProjectQuickLinks.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.ProjectQuickLinks.Add(this);
						this._ProjectID = value.ProjectID;
					}
					else
					{
						this._ProjectID = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProjectQuickLinks(ProjectQuickLink entity)
		{
			this.SendPropertyChanging();
			entity.ProjectQuickLink1 = this;
		}
		
		private void detach_ProjectQuickLinks(ProjectQuickLink entity)
		{
			this.SendPropertyChanging();
			entity.ProjectQuickLink1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Responses")]
	public partial class Response : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ResponseId;
		
		private string _Name;
		
		private string _Email;
		
		private string _Facebook;
		
		private string _Twitter;
		
		private string _Vkontakte;
		
		private string _Image;
		
		private string _Text;
		
		private string _Post;
		
		private int _Position;
		
		private string _Contacts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnResponseIdChanging(int value);
    partial void OnResponseIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnFacebookChanging(string value);
    partial void OnFacebookChanged();
    partial void OnTwitterChanging(string value);
    partial void OnTwitterChanged();
    partial void OnVkontakteChanging(string value);
    partial void OnVkontakteChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnPostChanging(string value);
    partial void OnPostChanged();
    partial void OnPositionChanging(int value);
    partial void OnPositionChanged();
    partial void OnContactsChanging(string value);
    partial void OnContactsChanged();
    #endregion
		
		public Response()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResponseId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ResponseId
		{
			get
			{
				return this._ResponseId;
			}
			set
			{
				if ((this._ResponseId != value))
				{
					this.OnResponseIdChanging(value);
					this.SendPropertyChanging();
					this._ResponseId = value;
					this.SendPropertyChanged("ResponseId");
					this.OnResponseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(100)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Facebook", DbType="NVarChar(100)")]
		public string Facebook
		{
			get
			{
				return this._Facebook;
			}
			set
			{
				if ((this._Facebook != value))
				{
					this.OnFacebookChanging(value);
					this.SendPropertyChanging();
					this._Facebook = value;
					this.SendPropertyChanged("Facebook");
					this.OnFacebookChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Twitter", DbType="NVarChar(100)")]
		public string Twitter
		{
			get
			{
				return this._Twitter;
			}
			set
			{
				if ((this._Twitter != value))
				{
					this.OnTwitterChanging(value);
					this.SendPropertyChanging();
					this._Twitter = value;
					this.SendPropertyChanged("Twitter");
					this.OnTwitterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Vkontakte", DbType="NVarChar(100)")]
		public string Vkontakte
		{
			get
			{
				return this._Vkontakte;
			}
			set
			{
				if ((this._Vkontakte != value))
				{
					this.OnVkontakteChanging(value);
					this.SendPropertyChanging();
					this._Vkontakte = value;
					this.SendPropertyChanged("Vkontakte");
					this.OnVkontakteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="NVarChar(50)")]
		public string Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Post", DbType="NVarChar(250)")]
		public string Post
		{
			get
			{
				return this._Post;
			}
			set
			{
				if ((this._Post != value))
				{
					this.OnPostChanging(value);
					this.SendPropertyChanging();
					this._Post = value;
					this.SendPropertyChanged("Post");
					this.OnPostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="Int NOT NULL")]
		public int Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Contacts", DbType="NVarChar(250)")]
		public string Contacts
		{
			get
			{
				return this._Contacts;
			}
			set
			{
				if ((this._Contacts != value))
				{
					this.OnContactsChanging(value);
					this.SendPropertyChanging();
					this._Contacts = value;
					this.SendPropertyChanged("Contacts");
					this.OnContactsChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SpecialOffer")]
	public partial class SpecialOffer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SpecialOfferID;
		
		private string _Description;
		
		private string _Discount;
		
		private string _OldPrice;
		
		private string _NewPrice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSpecialOfferIDChanging(int value);
    partial void OnSpecialOfferIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDiscountChanging(string value);
    partial void OnDiscountChanged();
    partial void OnOldPriceChanging(string value);
    partial void OnOldPriceChanged();
    partial void OnNewPriceChanging(string value);
    partial void OnNewPriceChanged();
    #endregion
		
		public SpecialOffer()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecialOfferID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SpecialOfferID
		{
			get
			{
				return this._SpecialOfferID;
			}
			set
			{
				if ((this._SpecialOfferID != value))
				{
					this.OnSpecialOfferIDChanging(value);
					this.SendPropertyChanging();
					this._SpecialOfferID = value;
					this.SendPropertyChanged("SpecialOfferID");
					this.OnSpecialOfferIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(250)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Discount", DbType="NVarChar(250)")]
		public string Discount
		{
			get
			{
				return this._Discount;
			}
			set
			{
				if ((this._Discount != value))
				{
					this.OnDiscountChanging(value);
					this.SendPropertyChanging();
					this._Discount = value;
					this.SendPropertyChanged("Discount");
					this.OnDiscountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OldPrice", DbType="NVarChar(250)")]
		public string OldPrice
		{
			get
			{
				return this._OldPrice;
			}
			set
			{
				if ((this._OldPrice != value))
				{
					this.OnOldPriceChanging(value);
					this.SendPropertyChanging();
					this._OldPrice = value;
					this.SendPropertyChanged("OldPrice");
					this.OnOldPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewPrice", DbType="NVarChar(250)")]
		public string NewPrice
		{
			get
			{
				return this._NewPrice;
			}
			set
			{
				if ((this._NewPrice != value))
				{
					this.OnNewPriceChanging(value);
					this.SendPropertyChanging();
					this._NewPrice = value;
					this.SendPropertyChanged("NewPrice");
					this.OnNewPriceChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Teasers")]
	public partial class Teaser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TeaserID;
		
		private string _Image;
		
		private string _Title;
		
		private string _Link;
		
		private EntitySet<BlogTeaser> _BlogTeasers;
		
		private EntitySet<PorfolioTeaser> _PorfolioTeasers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTeaserIDChanging(int value);
    partial void OnTeaserIDChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnLinkChanging(string value);
    partial void OnLinkChanged();
    #endregion
		
		public Teaser()
		{
			this._BlogTeasers = new EntitySet<BlogTeaser>(new Action<BlogTeaser>(this.attach_BlogTeasers), new Action<BlogTeaser>(this.detach_BlogTeasers));
			this._PorfolioTeasers = new EntitySet<PorfolioTeaser>(new Action<PorfolioTeaser>(this.attach_PorfolioTeasers), new Action<PorfolioTeaser>(this.detach_PorfolioTeasers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeaserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TeaserID
		{
			get
			{
				return this._TeaserID;
			}
			set
			{
				if ((this._TeaserID != value))
				{
					this.OnTeaserIDChanging(value);
					this.SendPropertyChanging();
					this._TeaserID = value;
					this.SendPropertyChanged("TeaserID");
					this.OnTeaserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(1024)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Link", DbType="NVarChar(256)")]
		public string Link
		{
			get
			{
				return this._Link;
			}
			set
			{
				if ((this._Link != value))
				{
					this.OnLinkChanging(value);
					this.SendPropertyChanging();
					this._Link = value;
					this.SendPropertyChanged("Link");
					this.OnLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teaser_BlogTeaser", Storage="_BlogTeasers", ThisKey="TeaserID", OtherKey="TeaserID")]
		public EntitySet<BlogTeaser> BlogTeasers
		{
			get
			{
				return this._BlogTeasers;
			}
			set
			{
				this._BlogTeasers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teaser_PorfolioTeaser", Storage="_PorfolioTeasers", ThisKey="TeaserID", OtherKey="TeaserID")]
		public EntitySet<PorfolioTeaser> PorfolioTeasers
		{
			get
			{
				return this._PorfolioTeasers;
			}
			set
			{
				this._PorfolioTeasers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BlogTeasers(BlogTeaser entity)
		{
			this.SendPropertyChanging();
			entity.Teaser = this;
		}
		
		private void detach_BlogTeasers(BlogTeaser entity)
		{
			this.SendPropertyChanging();
			entity.Teaser = null;
		}
		
		private void attach_PorfolioTeasers(PorfolioTeaser entity)
		{
			this.SendPropertyChanging();
			entity.Teaser = this;
		}
		
		private void detach_PorfolioTeasers(PorfolioTeaser entity)
		{
			this.SendPropertyChanging();
			entity.Teaser = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkCategories")]
	public partial class WorkCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _WorkCategoryID;
		
		private string _Name;
		
		private string _Title;
		
		private string _Text;
		
		private EntitySet<Work> _Works;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWorkCategoryIDChanging(int value);
    partial void OnWorkCategoryIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    #endregion
		
		public WorkCategory()
		{
			this._Works = new EntitySet<Work>(new Action<Work>(this.attach_Works), new Action<Work>(this.detach_Works));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkCategoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int WorkCategoryID
		{
			get
			{
				return this._WorkCategoryID;
			}
			set
			{
				if ((this._WorkCategoryID != value))
				{
					this.OnWorkCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._WorkCategoryID = value;
					this.SendPropertyChanged("WorkCategoryID");
					this.OnWorkCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(500)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkCategory_Work", Storage="_Works", ThisKey="WorkCategoryID", OtherKey="WorkCategoryID")]
		public EntitySet<Work> Works
		{
			get
			{
				return this._Works;
			}
			set
			{
				this._Works.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Works(Work entity)
		{
			this.SendPropertyChanging();
			entity.WorkCategory = this;
		}
		
		private void detach_Works(Work entity)
		{
			this.SendPropertyChanging();
			entity.WorkCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkPhotos")]
	public partial class WorkPhoto : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _WorkPhotoID;
		
		private int _WorkID;
		
		private string _Name;
		
		private EntityRef<Work> _Work;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWorkPhotoIDChanging(int value);
    partial void OnWorkPhotoIDChanged();
    partial void OnWorkIDChanging(int value);
    partial void OnWorkIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public WorkPhoto()
		{
			this._Work = default(EntityRef<Work>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkPhotoID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int WorkPhotoID
		{
			get
			{
				return this._WorkPhotoID;
			}
			set
			{
				if ((this._WorkPhotoID != value))
				{
					this.OnWorkPhotoIDChanging(value);
					this.SendPropertyChanging();
					this._WorkPhotoID = value;
					this.SendPropertyChanged("WorkPhotoID");
					this.OnWorkPhotoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkID", DbType="Int NOT NULL")]
		public int WorkID
		{
			get
			{
				return this._WorkID;
			}
			set
			{
				if ((this._WorkID != value))
				{
					if (this._Work.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWorkIDChanging(value);
					this.SendPropertyChanging();
					this._WorkID = value;
					this.SendPropertyChanged("WorkID");
					this.OnWorkIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Work_WorkPhoto", Storage="_Work", ThisKey="WorkID", OtherKey="WorkID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Work Work
		{
			get
			{
				return this._Work.Entity;
			}
			set
			{
				Work previousValue = this._Work.Entity;
				if (((previousValue != value) 
							|| (this._Work.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Work.Entity = null;
						previousValue.WorkPhotos.Remove(this);
					}
					this._Work.Entity = value;
					if ((value != null))
					{
						value.WorkPhotos.Add(this);
						this._WorkID = value.WorkID;
					}
					else
					{
						this._WorkID = default(int);
					}
					this.SendPropertyChanged("Work");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkQuickLinks")]
	public partial class WorkQuickLink : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _WorkQuickLinkID;
		
		private int _WorkID;
		
		private System.Nullable<int> _SubmenuLinkID;
		
		private string _Title;
		
		private string _URL;
		
		private EntityRef<Work> _Work;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWorkQuickLinkIDChanging(int value);
    partial void OnWorkQuickLinkIDChanged();
    partial void OnWorkIDChanging(int value);
    partial void OnWorkIDChanged();
    partial void OnSubmenuLinkIDChanging(System.Nullable<int> value);
    partial void OnSubmenuLinkIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnURLChanging(string value);
    partial void OnURLChanged();
    #endregion
		
		public WorkQuickLink()
		{
			this._Work = default(EntityRef<Work>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkQuickLinkID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int WorkQuickLinkID
		{
			get
			{
				return this._WorkQuickLinkID;
			}
			set
			{
				if ((this._WorkQuickLinkID != value))
				{
					this.OnWorkQuickLinkIDChanging(value);
					this.SendPropertyChanging();
					this._WorkQuickLinkID = value;
					this.SendPropertyChanged("WorkQuickLinkID");
					this.OnWorkQuickLinkIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkID", DbType="Int NOT NULL")]
		public int WorkID
		{
			get
			{
				return this._WorkID;
			}
			set
			{
				if ((this._WorkID != value))
				{
					if (this._Work.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWorkIDChanging(value);
					this.SendPropertyChanging();
					this._WorkID = value;
					this.SendPropertyChanged("WorkID");
					this.OnWorkIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmenuLinkID", DbType="Int")]
		public System.Nullable<int> SubmenuLinkID
		{
			get
			{
				return this._SubmenuLinkID;
			}
			set
			{
				if ((this._SubmenuLinkID != value))
				{
					this.OnSubmenuLinkIDChanging(value);
					this.SendPropertyChanging();
					this._SubmenuLinkID = value;
					this.SendPropertyChanged("SubmenuLinkID");
					this.OnSubmenuLinkIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_URL", DbType="NVarChar(500)")]
		public string URL
		{
			get
			{
				return this._URL;
			}
			set
			{
				if ((this._URL != value))
				{
					this.OnURLChanging(value);
					this.SendPropertyChanging();
					this._URL = value;
					this.SendPropertyChanged("URL");
					this.OnURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Work_WorkQuickLink", Storage="_Work", ThisKey="WorkID", OtherKey="WorkID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Work Work
		{
			get
			{
				return this._Work.Entity;
			}
			set
			{
				Work previousValue = this._Work.Entity;
				if (((previousValue != value) 
							|| (this._Work.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Work.Entity = null;
						previousValue.WorkQuickLinks.Remove(this);
					}
					this._Work.Entity = value;
					if ((value != null))
					{
						value.WorkQuickLinks.Add(this);
						this._WorkID = value.WorkID;
					}
					else
					{
						this._WorkID = default(int);
					}
					this.SendPropertyChanged("Work");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Courses")]
	public partial class Course : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CourseID;
		
		private string _Name;
		
		private string _Surname;
		
		private string _Phone;
		
		private string _Email;
		
		private string _CouponNumber;
		
		private string _ReferenceSource;
		
		private int _CourseNumber;
		
		private System.Nullable<int> _Summ;
		
		private System.Nullable<System.DateTime> _PaymentDate;
		
		private string _TransactionId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCourseIDChanging(int value);
    partial void OnCourseIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnCouponNumberChanging(string value);
    partial void OnCouponNumberChanged();
    partial void OnReferenceSourceChanging(string value);
    partial void OnReferenceSourceChanged();
    partial void OnCourseNumberChanging(int value);
    partial void OnCourseNumberChanged();
    partial void OnSummChanging(System.Nullable<int> value);
    partial void OnSummChanged();
    partial void OnPaymentDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPaymentDateChanged();
    partial void OnTransactionIdChanging(string value);
    partial void OnTransactionIdChanged();
    #endregion
		
		public Course()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CourseID
		{
			get
			{
				return this._CourseID;
			}
			set
			{
				if ((this._CourseID != value))
				{
					this.OnCourseIDChanging(value);
					this.SendPropertyChanging();
					this._CourseID = value;
					this.SendPropertyChanged("CourseID");
					this.OnCourseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CouponNumber", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CouponNumber
		{
			get
			{
				return this._CouponNumber;
			}
			set
			{
				if ((this._CouponNumber != value))
				{
					this.OnCouponNumberChanging(value);
					this.SendPropertyChanging();
					this._CouponNumber = value;
					this.SendPropertyChanged("CouponNumber");
					this.OnCouponNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReferenceSource", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string ReferenceSource
		{
			get
			{
				return this._ReferenceSource;
			}
			set
			{
				if ((this._ReferenceSource != value))
				{
					this.OnReferenceSourceChanging(value);
					this.SendPropertyChanging();
					this._ReferenceSource = value;
					this.SendPropertyChanged("ReferenceSource");
					this.OnReferenceSourceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseNumber", DbType="Int NOT NULL")]
		public int CourseNumber
		{
			get
			{
				return this._CourseNumber;
			}
			set
			{
				if ((this._CourseNumber != value))
				{
					this.OnCourseNumberChanging(value);
					this.SendPropertyChanging();
					this._CourseNumber = value;
					this.SendPropertyChanged("CourseNumber");
					this.OnCourseNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Summ", DbType="Int")]
		public System.Nullable<int> Summ
		{
			get
			{
				return this._Summ;
			}
			set
			{
				if ((this._Summ != value))
				{
					this.OnSummChanging(value);
					this.SendPropertyChanging();
					this._Summ = value;
					this.SendPropertyChanged("Summ");
					this.OnSummChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> PaymentDate
		{
			get
			{
				return this._PaymentDate;
			}
			set
			{
				if ((this._PaymentDate != value))
				{
					this.OnPaymentDateChanging(value);
					this.SendPropertyChanging();
					this._PaymentDate = value;
					this.SendPropertyChanged("PaymentDate");
					this.OnPaymentDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionId", DbType="NVarChar(50)")]
		public string TransactionId
		{
			get
			{
				return this._TransactionId;
			}
			set
			{
				if ((this._TransactionId != value))
				{
					this.OnTransactionIdChanging(value);
					this.SendPropertyChanging();
					this._TransactionId = value;
					this.SendPropertyChanged("TransactionId");
					this.OnTransactionIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PersonnelCategories")]
	public partial class PersonnelCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PersonnelCategoryID;
		
		private string _Name;
		
		private EntitySet<Personnel> _Personnels;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPersonnelCategoryIDChanging(int value);
    partial void OnPersonnelCategoryIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public PersonnelCategory()
		{
			this._Personnels = new EntitySet<Personnel>(new Action<Personnel>(this.attach_Personnels), new Action<Personnel>(this.detach_Personnels));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonnelCategoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PersonnelCategoryID
		{
			get
			{
				return this._PersonnelCategoryID;
			}
			set
			{
				if ((this._PersonnelCategoryID != value))
				{
					this.OnPersonnelCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._PersonnelCategoryID = value;
					this.SendPropertyChanged("PersonnelCategoryID");
					this.OnPersonnelCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PersonnelCategory_Personnel", Storage="_Personnels", ThisKey="PersonnelCategoryID", OtherKey="PersonnelCategoryID")]
		public EntitySet<Personnel> Personnels
		{
			get
			{
				return this._Personnels;
			}
			set
			{
				this._Personnels.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Personnels(Personnel entity)
		{
			this.SendPropertyChanging();
			entity.PersonnelCategory = this;
		}
		
		private void detach_Personnels(Personnel entity)
		{
			this.SendPropertyChanging();
			entity.PersonnelCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Projects")]
	public partial class Project : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProjectID;
		
		private System.Nullable<int> _ProjectCategoryID;
		
		private string _ProjectName;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private string _ProjectThumb;
		
		private string _ProjectDescription;
		
		private string _ProjectKeyWords;
		
		private string _ProjectTitle;
		
		private string _ProjectText;
		
		private string _Url;
		
		private System.Nullable<int> _Place;
		
		private System.Nullable<int> _DesignerID;
		
		private EntitySet<ProjectPhoto> _ProjectPhotos;
		
		private EntitySet<ProjectQuickLink> _ProjectQuickLinks;
		
		private EntityRef<ProjectCategory> _ProjectCategory;
		
		private EntityRef<Personnel> _Personnel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    partial void OnProjectCategoryIDChanging(System.Nullable<int> value);
    partial void OnProjectCategoryIDChanged();
    partial void OnProjectNameChanging(string value);
    partial void OnProjectNameChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnProjectThumbChanging(string value);
    partial void OnProjectThumbChanged();
    partial void OnProjectDescriptionChanging(string value);
    partial void OnProjectDescriptionChanged();
    partial void OnProjectKeyWordsChanging(string value);
    partial void OnProjectKeyWordsChanged();
    partial void OnProjectTitleChanging(string value);
    partial void OnProjectTitleChanged();
    partial void OnProjectTextChanging(string value);
    partial void OnProjectTextChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnPlaceChanging(System.Nullable<int> value);
    partial void OnPlaceChanged();
    partial void OnDesignerIDChanging(System.Nullable<int> value);
    partial void OnDesignerIDChanged();
    #endregion
		
		public Project()
		{
			this._ProjectPhotos = new EntitySet<ProjectPhoto>(new Action<ProjectPhoto>(this.attach_ProjectPhotos), new Action<ProjectPhoto>(this.detach_ProjectPhotos));
			this._ProjectQuickLinks = new EntitySet<ProjectQuickLink>(new Action<ProjectQuickLink>(this.attach_ProjectQuickLinks), new Action<ProjectQuickLink>(this.detach_ProjectQuickLinks));
			this._ProjectCategory = default(EntityRef<ProjectCategory>);
			this._Personnel = default(EntityRef<Personnel>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectCategoryID", DbType="Int")]
		public System.Nullable<int> ProjectCategoryID
		{
			get
			{
				return this._ProjectCategoryID;
			}
			set
			{
				if ((this._ProjectCategoryID != value))
				{
					if (this._ProjectCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectCategoryID = value;
					this.SendPropertyChanged("ProjectCategoryID");
					this.OnProjectCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectName", DbType="NVarChar(500)")]
		public string ProjectName
		{
			get
			{
				return this._ProjectName;
			}
			set
			{
				if ((this._ProjectName != value))
				{
					this.OnProjectNameChanging(value);
					this.SendPropertyChanging();
					this._ProjectName = value;
					this.SendPropertyChanged("ProjectName");
					this.OnProjectNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectThumb", DbType="NVarChar(500)")]
		public string ProjectThumb
		{
			get
			{
				return this._ProjectThumb;
			}
			set
			{
				if ((this._ProjectThumb != value))
				{
					this.OnProjectThumbChanging(value);
					this.SendPropertyChanging();
					this._ProjectThumb = value;
					this.SendPropertyChanged("ProjectThumb");
					this.OnProjectThumbChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectDescription", DbType="NVarChar(500)")]
		public string ProjectDescription
		{
			get
			{
				return this._ProjectDescription;
			}
			set
			{
				if ((this._ProjectDescription != value))
				{
					this.OnProjectDescriptionChanging(value);
					this.SendPropertyChanging();
					this._ProjectDescription = value;
					this.SendPropertyChanged("ProjectDescription");
					this.OnProjectDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectKeyWords", DbType="NVarChar(500)")]
		public string ProjectKeyWords
		{
			get
			{
				return this._ProjectKeyWords;
			}
			set
			{
				if ((this._ProjectKeyWords != value))
				{
					this.OnProjectKeyWordsChanging(value);
					this.SendPropertyChanging();
					this._ProjectKeyWords = value;
					this.SendPropertyChanged("ProjectKeyWords");
					this.OnProjectKeyWordsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectTitle", DbType="NVarChar(500)")]
		public string ProjectTitle
		{
			get
			{
				return this._ProjectTitle;
			}
			set
			{
				if ((this._ProjectTitle != value))
				{
					this.OnProjectTitleChanging(value);
					this.SendPropertyChanging();
					this._ProjectTitle = value;
					this.SendPropertyChanged("ProjectTitle");
					this.OnProjectTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectText", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string ProjectText
		{
			get
			{
				return this._ProjectText;
			}
			set
			{
				if ((this._ProjectText != value))
				{
					this.OnProjectTextChanging(value);
					this.SendPropertyChanging();
					this._ProjectText = value;
					this.SendPropertyChanged("ProjectText");
					this.OnProjectTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(1024)")]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Place", DbType="Int")]
		public System.Nullable<int> Place
		{
			get
			{
				return this._Place;
			}
			set
			{
				if ((this._Place != value))
				{
					this.OnPlaceChanging(value);
					this.SendPropertyChanging();
					this._Place = value;
					this.SendPropertyChanged("Place");
					this.OnPlaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DesignerID", DbType="Int")]
		public System.Nullable<int> DesignerID
		{
			get
			{
				return this._DesignerID;
			}
			set
			{
				if ((this._DesignerID != value))
				{
					if (this._Personnel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDesignerIDChanging(value);
					this.SendPropertyChanging();
					this._DesignerID = value;
					this.SendPropertyChanged("DesignerID");
					this.OnDesignerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectPhoto", Storage="_ProjectPhotos", ThisKey="ProjectID", OtherKey="ProjectID")]
		public EntitySet<ProjectPhoto> ProjectPhotos
		{
			get
			{
				return this._ProjectPhotos;
			}
			set
			{
				this._ProjectPhotos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectQuickLink", Storage="_ProjectQuickLinks", ThisKey="ProjectID", OtherKey="ProjectID")]
		public EntitySet<ProjectQuickLink> ProjectQuickLinks
		{
			get
			{
				return this._ProjectQuickLinks;
			}
			set
			{
				this._ProjectQuickLinks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectCategory_Project", Storage="_ProjectCategory", ThisKey="ProjectCategoryID", OtherKey="ProjectCategoryID", IsForeignKey=true)]
		public ProjectCategory ProjectCategory
		{
			get
			{
				return this._ProjectCategory.Entity;
			}
			set
			{
				ProjectCategory previousValue = this._ProjectCategory.Entity;
				if (((previousValue != value) 
							|| (this._ProjectCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectCategory.Entity = null;
						previousValue.Projects.Remove(this);
					}
					this._ProjectCategory.Entity = value;
					if ((value != null))
					{
						value.Projects.Add(this);
						this._ProjectCategoryID = value.ProjectCategoryID;
					}
					else
					{
						this._ProjectCategoryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProjectCategory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Personnel_Project", Storage="_Personnel", ThisKey="DesignerID", OtherKey="PersonnelID", IsForeignKey=true)]
		public Personnel Personnel
		{
			get
			{
				return this._Personnel.Entity;
			}
			set
			{
				Personnel previousValue = this._Personnel.Entity;
				if (((previousValue != value) 
							|| (this._Personnel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Personnel.Entity = null;
						previousValue.Projects.Remove(this);
					}
					this._Personnel.Entity = value;
					if ((value != null))
					{
						value.Projects.Add(this);
						this._DesignerID = value.PersonnelID;
					}
					else
					{
						this._DesignerID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Personnel");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProjectPhotos(ProjectPhoto entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_ProjectPhotos(ProjectPhoto entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_ProjectQuickLinks(ProjectQuickLink entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_ProjectQuickLinks(ProjectQuickLink entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Personnel")]
	public partial class Personnel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PersonnelID;
		
		private int _PersonnelCategoryID;
		
		private string _Name;
		
		private string _ThumbImage;
		
		private string _Styles;
		
		private string _Url;
		
		private System.Nullable<int> _Place;
		
		private string _Email;
		
		private string _Phone;
		
		private string _Experience;
		
		private EntitySet<Project> _Projects;
		
		private EntitySet<Question> _Questions;
		
		private EntityRef<PersonnelCategory> _PersonnelCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPersonnelIDChanging(int value);
    partial void OnPersonnelIDChanged();
    partial void OnPersonnelCategoryIDChanging(int value);
    partial void OnPersonnelCategoryIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnThumbImageChanging(string value);
    partial void OnThumbImageChanged();
    partial void OnStylesChanging(string value);
    partial void OnStylesChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnPlaceChanging(System.Nullable<int> value);
    partial void OnPlaceChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnExperienceChanging(string value);
    partial void OnExperienceChanged();
    #endregion
		
		public Personnel()
		{
			this._Projects = new EntitySet<Project>(new Action<Project>(this.attach_Projects), new Action<Project>(this.detach_Projects));
			this._Questions = new EntitySet<Question>(new Action<Question>(this.attach_Questions), new Action<Question>(this.detach_Questions));
			this._PersonnelCategory = default(EntityRef<PersonnelCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonnelID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PersonnelID
		{
			get
			{
				return this._PersonnelID;
			}
			set
			{
				if ((this._PersonnelID != value))
				{
					this.OnPersonnelIDChanging(value);
					this.SendPropertyChanging();
					this._PersonnelID = value;
					this.SendPropertyChanged("PersonnelID");
					this.OnPersonnelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonnelCategoryID", DbType="Int NOT NULL")]
		public int PersonnelCategoryID
		{
			get
			{
				return this._PersonnelCategoryID;
			}
			set
			{
				if ((this._PersonnelCategoryID != value))
				{
					if (this._PersonnelCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonnelCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._PersonnelCategoryID = value;
					this.SendPropertyChanged("PersonnelCategoryID");
					this.OnPersonnelCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(500)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThumbImage", DbType="NVarChar(500)")]
		public string ThumbImage
		{
			get
			{
				return this._ThumbImage;
			}
			set
			{
				if ((this._ThumbImage != value))
				{
					this.OnThumbImageChanging(value);
					this.SendPropertyChanging();
					this._ThumbImage = value;
					this.SendPropertyChanged("ThumbImage");
					this.OnThumbImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Styles", DbType="NVarChar(500)")]
		public string Styles
		{
			get
			{
				return this._Styles;
			}
			set
			{
				if ((this._Styles != value))
				{
					this.OnStylesChanging(value);
					this.SendPropertyChanging();
					this._Styles = value;
					this.SendPropertyChanged("Styles");
					this.OnStylesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(1024)")]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Place", DbType="Int")]
		public System.Nullable<int> Place
		{
			get
			{
				return this._Place;
			}
			set
			{
				if ((this._Place != value))
				{
					this.OnPlaceChanging(value);
					this.SendPropertyChanging();
					this._Place = value;
					this.SendPropertyChanged("Place");
					this.OnPlaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(500)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(50)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Experience", DbType="NVarChar(50)")]
		public string Experience
		{
			get
			{
				return this._Experience;
			}
			set
			{
				if ((this._Experience != value))
				{
					this.OnExperienceChanging(value);
					this.SendPropertyChanging();
					this._Experience = value;
					this.SendPropertyChanged("Experience");
					this.OnExperienceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Personnel_Project", Storage="_Projects", ThisKey="PersonnelID", OtherKey="DesignerID")]
		public EntitySet<Project> Projects
		{
			get
			{
				return this._Projects;
			}
			set
			{
				this._Projects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Personnel_Question", Storage="_Questions", ThisKey="PersonnelID", OtherKey="DesignerID")]
		public EntitySet<Question> Questions
		{
			get
			{
				return this._Questions;
			}
			set
			{
				this._Questions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PersonnelCategory_Personnel", Storage="_PersonnelCategory", ThisKey="PersonnelCategoryID", OtherKey="PersonnelCategoryID", IsForeignKey=true)]
		public PersonnelCategory PersonnelCategory
		{
			get
			{
				return this._PersonnelCategory.Entity;
			}
			set
			{
				PersonnelCategory previousValue = this._PersonnelCategory.Entity;
				if (((previousValue != value) 
							|| (this._PersonnelCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PersonnelCategory.Entity = null;
						previousValue.Personnels.Remove(this);
					}
					this._PersonnelCategory.Entity = value;
					if ((value != null))
					{
						value.Personnels.Add(this);
						this._PersonnelCategoryID = value.PersonnelCategoryID;
					}
					else
					{
						this._PersonnelCategoryID = default(int);
					}
					this.SendPropertyChanged("PersonnelCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.Personnel = this;
		}
		
		private void detach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.Personnel = null;
		}
		
		private void attach_Questions(Question entity)
		{
			this.SendPropertyChanging();
			entity.Personnel = this;
		}
		
		private void detach_Questions(Question entity)
		{
			this.SendPropertyChanging();
			entity.Personnel = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Questions")]
	public partial class Question : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _QuestionID;
		
		private string _QuestionText;
		
		private string _AnswerText;
		
		private System.Nullable<int> _DesignerID;
		
		private System.DateTime _Date;
		
		private bool _Visible;
		
		private string _Name;
		
		private string _Phone;
		
		private string _Email;
		
		private string _FileName;
		
		private EntityRef<Personnel> _Personnel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQuestionIDChanging(int value);
    partial void OnQuestionIDChanged();
    partial void OnQuestionTextChanging(string value);
    partial void OnQuestionTextChanged();
    partial void OnAnswerTextChanging(string value);
    partial void OnAnswerTextChanged();
    partial void OnDesignerIDChanging(System.Nullable<int> value);
    partial void OnDesignerIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnVisibleChanging(bool value);
    partial void OnVisibleChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    #endregion
		
		public Question()
		{
			this._Personnel = default(EntityRef<Personnel>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int QuestionID
		{
			get
			{
				return this._QuestionID;
			}
			set
			{
				if ((this._QuestionID != value))
				{
					this.OnQuestionIDChanging(value);
					this.SendPropertyChanging();
					this._QuestionID = value;
					this.SendPropertyChanged("QuestionID");
					this.OnQuestionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionText", DbType="NVarChar(MAX)")]
		public string QuestionText
		{
			get
			{
				return this._QuestionText;
			}
			set
			{
				if ((this._QuestionText != value))
				{
					this.OnQuestionTextChanging(value);
					this.SendPropertyChanging();
					this._QuestionText = value;
					this.SendPropertyChanged("QuestionText");
					this.OnQuestionTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnswerText", DbType="NVarChar(MAX)")]
		public string AnswerText
		{
			get
			{
				return this._AnswerText;
			}
			set
			{
				if ((this._AnswerText != value))
				{
					this.OnAnswerTextChanging(value);
					this.SendPropertyChanging();
					this._AnswerText = value;
					this.SendPropertyChanged("AnswerText");
					this.OnAnswerTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DesignerID", DbType="Int")]
		public System.Nullable<int> DesignerID
		{
			get
			{
				return this._DesignerID;
			}
			set
			{
				if ((this._DesignerID != value))
				{
					if (this._Personnel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDesignerIDChanging(value);
					this.SendPropertyChanging();
					this._DesignerID = value;
					this.SendPropertyChanged("DesignerID");
					this.OnDesignerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Visible", DbType="Bit NOT NULL")]
		public bool Visible
		{
			get
			{
				return this._Visible;
			}
			set
			{
				if ((this._Visible != value))
				{
					this.OnVisibleChanging(value);
					this.SendPropertyChanging();
					this._Visible = value;
					this.SendPropertyChanged("Visible");
					this.OnVisibleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileName", DbType="NVarChar(500)")]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Personnel_Question", Storage="_Personnel", ThisKey="DesignerID", OtherKey="PersonnelID", IsForeignKey=true)]
		public Personnel Personnel
		{
			get
			{
				return this._Personnel.Entity;
			}
			set
			{
				Personnel previousValue = this._Personnel.Entity;
				if (((previousValue != value) 
							|| (this._Personnel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Personnel.Entity = null;
						previousValue.Questions.Remove(this);
					}
					this._Personnel.Entity = value;
					if ((value != null))
					{
						value.Questions.Add(this);
						this._DesignerID = value.PersonnelID;
					}
					else
					{
						this._DesignerID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Personnel");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
